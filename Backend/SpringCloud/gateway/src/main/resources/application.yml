server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
token:
  expiration_time: 86400000
  secret: user_token # 임의의 값

# 자바소스로 필터적용 -> spring gateway yml 파일설정
spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Gateway Global Filter
            preLogger: true
            postLogger: true
      routes:
#        - id: first-service
#          uri: lb://my-first-service
#          predicates:
#            - Path=/first-service/**
#          filters:
#            #- AddRequestHeader=first-request, first-request-header2
#            #- AddResponseHeader=first-response, first-response-header2
#            - CustomFilter
#        - id: user-service
#          uri: lb://USER-SERVICE
#          predicates:
#            # 조건식 사용
#            # 라우팅된 경로는 api에서 읽을 수 없어 404에러 발생!
#            - Path=/user-service/**
        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**
        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**
#        - id: second-service
#          uri: lb://my-second-service
#          predicates:
#            - Path=/second-service/**
#          filters:
#            #- AddRequestHeader=second-request, second-request-header2
#            #- AddResponseHeader=second-response, second-response-header2
#            - name: CustomFilter
#            - name: LoggingFilter
#              args:
#                baseMessage: Hi, there.
#                preLogger: true
#                postLogger: true
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            - AuthorizationHeaderFilter
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login # predicates 패스명시 -> 해당 패스한해 적용 -> 타 경로 복붙
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            # 형식변환 localhost:8080/user-service/login -> localhost:8080/login
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=GET
          filters:
            - RemoveRequestHeader=Cookie
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, httptrace, busrefresh, info, metrics, prometheus